{{- $parallelism := getenv "PARALLELISM" "1" -}}
{{- $timeout := getenv "TIMEOUT" "300" -}}

{{- $target := (getenv "TARGET") -}}
{{- $ldflags := join (getenv "BUILD_FLAGS" "[]" | yamlArray) " " -}}
{{- $bin := filepath.Base $target -}}

{{- $test_targets_escaped := dict -}}

{{- range $test_target := (getenv "TEST_TARGETS" "[]" | yamlArray) -}}
{{- $test_targets_escaped = merge $test_targets_escaped (dict (printf "test_%s" (strings.ReplaceAll "/" "_" $test_target)) $test_target) -}}
{{- end -}}

{{ if $ldflags }}export GOLDFLAGS := {{ $ldflags }}{{ end }}

all: build tests

build:
	go clean -cache
	go clean -testcache

	# must be built through script, if not e2e fails
	hack/make-rules/build.sh {{ $target }}

	cp ./_output/bin/{{ $bin }} .

tests: {{ join (keys $test_targets_escaped) " " }}

{{ range $key, $value := $test_targets_escaped }}
{{ $key }}:
	go clean -cache
	go clean -testcache

	cd {{ $value }} && go test \
		-p {{ $parallelism }} \
		-timeout {{ $timeout }}s \
		./...
{{ end }}

{{ range $key, $value := (getenv "ENVS" | yaml) }}
export {{ $key }} := {{ $value }}
{{ end }}
